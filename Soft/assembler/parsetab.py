
# F:\Workspace\ASM\Soft\assembler\parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.5'

_lr_method = 'LALR'

_lr_signature = '653B839C45393F8C5F51893E0DE7303C'
    
_lr_action_items = {'DEC':([6,18,20,21,],[13,13,13,13,]),'WORD':([17,],[21,]),'TEXT':([0,],[1,]),'HEX':([6,18,20,21,],[11,11,11,11,]),'LABLEref':([6,18,],[12,23,]),'LABLEdef':([1,4,5,7,10,11,12,13,15,16,19,22,23,24,25,26,],[5,5,5,17,-13,-16,-14,-15,17,-6,-7,-11,-12,-10,-9,-8,]),'BYTE':([17,],[20,]),'$end':([2,3,4,8,9,10,11,12,13,15,16,19,22,23,24,25,26,],[0,-2,-3,-4,-5,-13,-16,-14,-15,-1,-6,-7,-11,-12,-10,-9,-8,]),'DATA':([3,4,8,9,10,11,12,13,22,23,24,],[7,-3,-4,-5,-13,-16,-14,-15,-11,-12,-10,]),'REG':([6,14,18,],[14,18,24,]),'OP':([1,4,5,10,11,12,13,22,23,24,],[6,6,6,-13,-16,-14,-15,-11,-12,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'IR':([1,4,5,],[4,4,4,]),'INT':([6,18,20,21,],[10,22,25,26,]),'textseg':([1,4,5,],[3,8,9,]),'program':([0,],[2,]),'datastate':([7,15,],[16,19,]),'dataseg':([7,],[15,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> TEXT textseg DATA dataseg','program',4,'p_expression_program','asm2.py',207),
  ('program -> TEXT textseg','program',2,'p_expression_program','asm2.py',208),
  ('textseg -> IR','textseg',1,'p_expression_textseg','asm2.py',212),
  ('textseg -> IR textseg','textseg',2,'p_expression_textseg','asm2.py',213),
  ('textseg -> LABLEdef textseg','textseg',2,'p_expression_textseg','asm2.py',214),
  ('dataseg -> datastate','dataseg',1,'p_expression_dataseg','asm2.py',217),
  ('dataseg -> dataseg datastate','dataseg',2,'p_expression_dataseg','asm2.py',218),
  ('datastate -> LABLEdef WORD INT','datastate',3,'p_expression_datastate','asm2.py',221),
  ('datastate -> LABLEdef BYTE INT','datastate',3,'p_expression_datastate','asm2.py',222),
  ('IR -> OP REG REG REG','IR',4,'p_expression_IR_R','asm2.py',228),
  ('IR -> OP REG REG INT','IR',4,'p_expression_IR_I','asm2.py',234),
  ('IR -> OP REG REG LABLEref','IR',4,'p_expression_IR_I_LABLE','asm2.py',240),
  ('IR -> OP INT','IR',2,'p_expression_IR_J','asm2.py',260),
  ('IR -> OP LABLEref','IR',2,'p_expression_J_L','asm2.py',266),
  ('INT -> DEC','INT',1,'p_expression_INT','asm2.py',272),
  ('INT -> HEX','INT',1,'p_expression_INT','asm2.py',273),
]
