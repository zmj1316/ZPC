Created by PLY version 3.6 (http://www.dabeaz.com/ply)

Unused terminals:

    SPACE

Grammar

Rule 0     S' -> program
Rule 1     program -> TEXT textseg DATA dataseg
Rule 2     program -> TEXT textseg
Rule 3     textseg -> IR
Rule 4     textseg -> IR textseg
Rule 5     textseg -> LABLEdef textseg
Rule 6     dataseg -> datastate
Rule 7     dataseg -> dataseg datastate
Rule 8     datastate -> LABLEdef WORD INT
Rule 9     datastate -> LABLEdef BYTE INT
Rule 10    datastate -> LABLEdef ASCII STRING
Rule 11    IR -> OP REG REG REG
Rule 12    IR -> OP REG REG INT
Rule 13    IR -> OP REG REG LABLEref
Rule 14    IR -> SYSCALL
Rule 15    IR -> ERET
Rule 16    IR -> JR REG
Rule 17    IR -> OP INT
Rule 18    IR -> OP LABLEref
Rule 19    INT -> DEC
Rule 20    INT -> HEX

Terminals, with rules where they appear

ASCII                : 10
BYTE                 : 9
DATA                 : 1
DEC                  : 19
ERET                 : 15
HEX                  : 20
JR                   : 16
LABLEdef             : 5 8 9 10
LABLEref             : 13 18
OP                   : 11 12 13 17 18
REG                  : 11 11 11 12 12 13 13 16
SPACE                : 
STRING               : 10
SYSCALL              : 14
TEXT                 : 1 2
WORD                 : 8
error                : 

Nonterminals, with rules where they appear

INT                  : 8 9 12 17
IR                   : 3 4
dataseg              : 1 7
datastate            : 6 7
program              : 0
textseg              : 1 2 4 5

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . TEXT textseg DATA dataseg
    (2) program -> . TEXT textseg

    TEXT            shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> TEXT . textseg DATA dataseg
    (2) program -> TEXT . textseg
    (3) textseg -> . IR
    (4) textseg -> . IR textseg
    (5) textseg -> . LABLEdef textseg
    (11) IR -> . OP REG REG REG
    (12) IR -> . OP REG REG INT
    (13) IR -> . OP REG REG LABLEref
    (14) IR -> . SYSCALL
    (15) IR -> . ERET
    (16) IR -> . JR REG
    (17) IR -> . OP INT
    (18) IR -> . OP LABLEref

    LABLEdef        shift and go to state 8
    OP              shift and go to state 9
    SYSCALL         shift and go to state 7
    ERET            shift and go to state 4
    JR              shift and go to state 6

    textseg                        shift and go to state 3
    IR                             shift and go to state 5

state 2

    (0) S' -> program .



state 3

    (1) program -> TEXT textseg . DATA dataseg
    (2) program -> TEXT textseg .

    DATA            shift and go to state 10
    $end            reduce using rule 2 (program -> TEXT textseg .)


state 4

    (15) IR -> ERET .

    LABLEdef        reduce using rule 15 (IR -> ERET .)
    OP              reduce using rule 15 (IR -> ERET .)
    SYSCALL         reduce using rule 15 (IR -> ERET .)
    ERET            reduce using rule 15 (IR -> ERET .)
    JR              reduce using rule 15 (IR -> ERET .)
    DATA            reduce using rule 15 (IR -> ERET .)
    $end            reduce using rule 15 (IR -> ERET .)


state 5

    (3) textseg -> IR .
    (4) textseg -> IR . textseg
    (3) textseg -> . IR
    (4) textseg -> . IR textseg
    (5) textseg -> . LABLEdef textseg
    (11) IR -> . OP REG REG REG
    (12) IR -> . OP REG REG INT
    (13) IR -> . OP REG REG LABLEref
    (14) IR -> . SYSCALL
    (15) IR -> . ERET
    (16) IR -> . JR REG
    (17) IR -> . OP INT
    (18) IR -> . OP LABLEref

    DATA            reduce using rule 3 (textseg -> IR .)
    $end            reduce using rule 3 (textseg -> IR .)
    LABLEdef        shift and go to state 8
    OP              shift and go to state 9
    SYSCALL         shift and go to state 7
    ERET            shift and go to state 4
    JR              shift and go to state 6

    textseg                        shift and go to state 11
    IR                             shift and go to state 5

state 6

    (16) IR -> JR . REG

    REG             shift and go to state 12


state 7

    (14) IR -> SYSCALL .

    LABLEdef        reduce using rule 14 (IR -> SYSCALL .)
    OP              reduce using rule 14 (IR -> SYSCALL .)
    SYSCALL         reduce using rule 14 (IR -> SYSCALL .)
    ERET            reduce using rule 14 (IR -> SYSCALL .)
    JR              reduce using rule 14 (IR -> SYSCALL .)
    DATA            reduce using rule 14 (IR -> SYSCALL .)
    $end            reduce using rule 14 (IR -> SYSCALL .)


state 8

    (5) textseg -> LABLEdef . textseg
    (3) textseg -> . IR
    (4) textseg -> . IR textseg
    (5) textseg -> . LABLEdef textseg
    (11) IR -> . OP REG REG REG
    (12) IR -> . OP REG REG INT
    (13) IR -> . OP REG REG LABLEref
    (14) IR -> . SYSCALL
    (15) IR -> . ERET
    (16) IR -> . JR REG
    (17) IR -> . OP INT
    (18) IR -> . OP LABLEref

    LABLEdef        shift and go to state 8
    OP              shift and go to state 9
    SYSCALL         shift and go to state 7
    ERET            shift and go to state 4
    JR              shift and go to state 6

    textseg                        shift and go to state 13
    IR                             shift and go to state 5

state 9

    (11) IR -> OP . REG REG REG
    (12) IR -> OP . REG REG INT
    (13) IR -> OP . REG REG LABLEref
    (17) IR -> OP . INT
    (18) IR -> OP . LABLEref
    (19) INT -> . DEC
    (20) INT -> . HEX

    REG             shift and go to state 18
    LABLEref        shift and go to state 16
    DEC             shift and go to state 17
    HEX             shift and go to state 15

    INT                            shift and go to state 14

state 10

    (1) program -> TEXT textseg DATA . dataseg
    (6) dataseg -> . datastate
    (7) dataseg -> . dataseg datastate
    (8) datastate -> . LABLEdef WORD INT
    (9) datastate -> . LABLEdef BYTE INT
    (10) datastate -> . LABLEdef ASCII STRING

    LABLEdef        shift and go to state 21

    dataseg                        shift and go to state 19
    datastate                      shift and go to state 20

state 11

    (4) textseg -> IR textseg .

    DATA            reduce using rule 4 (textseg -> IR textseg .)
    $end            reduce using rule 4 (textseg -> IR textseg .)


state 12

    (16) IR -> JR REG .

    LABLEdef        reduce using rule 16 (IR -> JR REG .)
    OP              reduce using rule 16 (IR -> JR REG .)
    SYSCALL         reduce using rule 16 (IR -> JR REG .)
    ERET            reduce using rule 16 (IR -> JR REG .)
    JR              reduce using rule 16 (IR -> JR REG .)
    DATA            reduce using rule 16 (IR -> JR REG .)
    $end            reduce using rule 16 (IR -> JR REG .)


state 13

    (5) textseg -> LABLEdef textseg .

    DATA            reduce using rule 5 (textseg -> LABLEdef textseg .)
    $end            reduce using rule 5 (textseg -> LABLEdef textseg .)


state 14

    (17) IR -> OP INT .

    LABLEdef        reduce using rule 17 (IR -> OP INT .)
    OP              reduce using rule 17 (IR -> OP INT .)
    SYSCALL         reduce using rule 17 (IR -> OP INT .)
    ERET            reduce using rule 17 (IR -> OP INT .)
    JR              reduce using rule 17 (IR -> OP INT .)
    DATA            reduce using rule 17 (IR -> OP INT .)
    $end            reduce using rule 17 (IR -> OP INT .)


state 15

    (20) INT -> HEX .

    LABLEdef        reduce using rule 20 (INT -> HEX .)
    $end            reduce using rule 20 (INT -> HEX .)
    OP              reduce using rule 20 (INT -> HEX .)
    SYSCALL         reduce using rule 20 (INT -> HEX .)
    ERET            reduce using rule 20 (INT -> HEX .)
    JR              reduce using rule 20 (INT -> HEX .)
    DATA            reduce using rule 20 (INT -> HEX .)


state 16

    (18) IR -> OP LABLEref .

    LABLEdef        reduce using rule 18 (IR -> OP LABLEref .)
    OP              reduce using rule 18 (IR -> OP LABLEref .)
    SYSCALL         reduce using rule 18 (IR -> OP LABLEref .)
    ERET            reduce using rule 18 (IR -> OP LABLEref .)
    JR              reduce using rule 18 (IR -> OP LABLEref .)
    DATA            reduce using rule 18 (IR -> OP LABLEref .)
    $end            reduce using rule 18 (IR -> OP LABLEref .)


state 17

    (19) INT -> DEC .

    LABLEdef        reduce using rule 19 (INT -> DEC .)
    $end            reduce using rule 19 (INT -> DEC .)
    OP              reduce using rule 19 (INT -> DEC .)
    SYSCALL         reduce using rule 19 (INT -> DEC .)
    ERET            reduce using rule 19 (INT -> DEC .)
    JR              reduce using rule 19 (INT -> DEC .)
    DATA            reduce using rule 19 (INT -> DEC .)


state 18

    (11) IR -> OP REG . REG REG
    (12) IR -> OP REG . REG INT
    (13) IR -> OP REG . REG LABLEref

    REG             shift and go to state 22


state 19

    (1) program -> TEXT textseg DATA dataseg .
    (7) dataseg -> dataseg . datastate
    (8) datastate -> . LABLEdef WORD INT
    (9) datastate -> . LABLEdef BYTE INT
    (10) datastate -> . LABLEdef ASCII STRING

    $end            reduce using rule 1 (program -> TEXT textseg DATA dataseg .)
    LABLEdef        shift and go to state 21

    datastate                      shift and go to state 23

state 20

    (6) dataseg -> datastate .

    LABLEdef        reduce using rule 6 (dataseg -> datastate .)
    $end            reduce using rule 6 (dataseg -> datastate .)


state 21

    (8) datastate -> LABLEdef . WORD INT
    (9) datastate -> LABLEdef . BYTE INT
    (10) datastate -> LABLEdef . ASCII STRING

    WORD            shift and go to state 24
    BYTE            shift and go to state 25
    ASCII           shift and go to state 26


state 22

    (11) IR -> OP REG REG . REG
    (12) IR -> OP REG REG . INT
    (13) IR -> OP REG REG . LABLEref
    (19) INT -> . DEC
    (20) INT -> . HEX

    REG             shift and go to state 29
    LABLEref        shift and go to state 28
    DEC             shift and go to state 17
    HEX             shift and go to state 15

    INT                            shift and go to state 27

state 23

    (7) dataseg -> dataseg datastate .

    LABLEdef        reduce using rule 7 (dataseg -> dataseg datastate .)
    $end            reduce using rule 7 (dataseg -> dataseg datastate .)


state 24

    (8) datastate -> LABLEdef WORD . INT
    (19) INT -> . DEC
    (20) INT -> . HEX

    DEC             shift and go to state 17
    HEX             shift and go to state 15

    INT                            shift and go to state 30

state 25

    (9) datastate -> LABLEdef BYTE . INT
    (19) INT -> . DEC
    (20) INT -> . HEX

    DEC             shift and go to state 17
    HEX             shift and go to state 15

    INT                            shift and go to state 31

state 26

    (10) datastate -> LABLEdef ASCII . STRING

    STRING          shift and go to state 32


state 27

    (12) IR -> OP REG REG INT .

    LABLEdef        reduce using rule 12 (IR -> OP REG REG INT .)
    OP              reduce using rule 12 (IR -> OP REG REG INT .)
    SYSCALL         reduce using rule 12 (IR -> OP REG REG INT .)
    ERET            reduce using rule 12 (IR -> OP REG REG INT .)
    JR              reduce using rule 12 (IR -> OP REG REG INT .)
    DATA            reduce using rule 12 (IR -> OP REG REG INT .)
    $end            reduce using rule 12 (IR -> OP REG REG INT .)


state 28

    (13) IR -> OP REG REG LABLEref .

    LABLEdef        reduce using rule 13 (IR -> OP REG REG LABLEref .)
    OP              reduce using rule 13 (IR -> OP REG REG LABLEref .)
    SYSCALL         reduce using rule 13 (IR -> OP REG REG LABLEref .)
    ERET            reduce using rule 13 (IR -> OP REG REG LABLEref .)
    JR              reduce using rule 13 (IR -> OP REG REG LABLEref .)
    DATA            reduce using rule 13 (IR -> OP REG REG LABLEref .)
    $end            reduce using rule 13 (IR -> OP REG REG LABLEref .)


state 29

    (11) IR -> OP REG REG REG .

    LABLEdef        reduce using rule 11 (IR -> OP REG REG REG .)
    OP              reduce using rule 11 (IR -> OP REG REG REG .)
    SYSCALL         reduce using rule 11 (IR -> OP REG REG REG .)
    ERET            reduce using rule 11 (IR -> OP REG REG REG .)
    JR              reduce using rule 11 (IR -> OP REG REG REG .)
    DATA            reduce using rule 11 (IR -> OP REG REG REG .)
    $end            reduce using rule 11 (IR -> OP REG REG REG .)


state 30

    (8) datastate -> LABLEdef WORD INT .

    LABLEdef        reduce using rule 8 (datastate -> LABLEdef WORD INT .)
    $end            reduce using rule 8 (datastate -> LABLEdef WORD INT .)


state 31

    (9) datastate -> LABLEdef BYTE INT .

    LABLEdef        reduce using rule 9 (datastate -> LABLEdef BYTE INT .)
    $end            reduce using rule 9 (datastate -> LABLEdef BYTE INT .)


state 32

    (10) datastate -> LABLEdef ASCII STRING .

    LABLEdef        reduce using rule 10 (datastate -> LABLEdef ASCII STRING .)
    $end            reduce using rule 10 (datastate -> LABLEdef ASCII STRING .)

